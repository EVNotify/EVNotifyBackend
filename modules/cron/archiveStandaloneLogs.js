/**
 * @file modules/cron/archiveStandaloneLogs.js
 * @author GPlay97
 * @description Cron file to archive logs for users in background for each log as standalone log table
 */
const http = require('http');
const srv_config = require('./../../srv_config.json');
const db = require('./../db');
const query = db.query;

http.createServer().listen(srv_config.CRON_ARCHIVE_STANDALONE_PORT);

const getLogs = () => {
  return new Promise((resolve, reject) => {
    query('SELECT * FROM logs WHERE archived=0 AND autogenerated=1 AND standalone=0 ORDER BY start ASC LIMIT 1', null, (err, logsRes) => {
      if (!err && Array.isArray(logsRes)) {
        resolve(logsRes);
      } else {
        reject(err);
      }
    });
  });
};

const createTable = (log) => {
  return new Promise((resolve, reject) => {
    const tableName = `statistics_log_${log.id}`;

    query(`CREATE TABLE IF NOT EXISTS ${tableName} LIKE statistics`, null, (err) => {
      if (!err) {
        resolve(tableName);
      } else {
        reject(err);
      }
    });
  });
};

const getStatsForLog = (log) => {
  return new Promise((resolve, reject) => {
    query('SELECT * FROM statistics WHERE akey=? AND timestamp >= ? AND timestamp <= ?', [log.akey, log.start, log.end], (err, stats) => {
      if (!err && Array.isArray(stats)) {
        resolve(stats);
      } else {
        reject(err);
      }
    });
  });
};

const updateLog = (log) => {
  return new Promise((resolve, reject) => {
    query('UPDATE logs SET archived=1, standalone=1 WHERE id=?', [log.id], (err) => {
      if (!err) {
        resolve();
      } else {
        reject();
      }
    });
  });
};

const insertData = (tableName, stats) => {
  return new Promise((resolve, reject) => {
    query(`INSERT INTO ${tableName} (${Object.keys(stats[0]).join(',')}) VALUES ?`, [stats.map((stat) => Object.values(stat))], (err) => {
      if (!err) {
        resolve();
      } else {
        reject(err);
      }
    });
  });
};

const deleteData = (log) => {
  return new Promise((resolve, reject) => {
    query('DELETE FROM statistics WHERE akey=? AND timestamp >= ?  AND timestamp <= ?', [log.akey, log.start, log.end], (err) => {
      if (!err) {
        resolve();
      } else {
        reject(err);
      }
    });
  });
};

const archiveStandaloneLogs = async () => {
  const logs = await getLogs();
  
  for (const index in logs) {
    if (Object.hasOwnProperty.call(logs, index)) {
      const log = logs[index];
      const name = await createTable(log);
      const stats = await getStatsForLog(log);

      if (!stats.length) {
        await updateLog(log);
      } else {
        await insertData(name, stats);
        await deleteData(log);
        await updateLog(log);
      }
    }
  }
};

if (require.main === module) {
  try {
    archiveStandaloneLogs()
      .then(() => {
        db.close(() => {
            process.exit();
        });
      });
  } catch (error) {
    console.error(error);
    db.close(() => {
      process.exit();
    });
  }
} else {
  exports.archiveLogs = archiveLogs;
}
